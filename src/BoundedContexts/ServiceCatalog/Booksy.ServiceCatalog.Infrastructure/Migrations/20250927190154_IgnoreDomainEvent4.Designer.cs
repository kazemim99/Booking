// <auto-generated />
using System;
using Booksy.ServiceCatalog.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booksy.ServiceCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(ServiceCatalogDbContext))]
    [Migration("20250927190154_IgnoreDomainEvent4")]
    partial class IgnoreDomainEvent4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ServiceCatalog")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("AllowOnlineBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("OffersMobileServices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("OwnerId");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("IX_Providers_OwnerId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Providers_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Providers_Type");

                    b.ToTable("Providers", "ServiceCatalog");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("AllowOnlineBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("AvailableAsMobile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AvailableAtLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("BufferTime")
                        .HasColumnType("integer")
                        .HasColumnName("BufferTimeMinutes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("DepositPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("DurationMinutes");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MaxAdvanceBookingDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(90);

                    b.Property<int>("MaxConcurrentBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<int>("MinAdvanceBookingHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PreparationTime")
                        .HasColumnType("integer")
                        .HasColumnName("PreparationTimeMinutes");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProviderId");

                    b.Property<Guid?>("ProviderId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresDeposit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<string>("_qualifiedStaff")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("QualifiedStaff");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Services_CreatedAt");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_Services_ProviderId");

                    b.HasIndex("ProviderId1");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Services_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Services_Type");

                    b.HasIndex("ProviderId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Services_ProviderId_Name");

                    b.HasIndex("Status", "AllowOnlineBooking")
                        .HasDatabaseName("IX_Services_Status_AllowOnlineBooking");

                    b.ToTable("Services", "servicecatalog");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeek")
                        .HasDatabaseName("IX_BusinessHours_DayOfWeek");

                    b.HasIndex("ProviderId");

                    b.ToTable("BusinessHours", "ServiceCatalog");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.ServiceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdditionalDuration")
                        .HasColumnType("integer")
                        .HasColumnName("AdditionalDurationMinutes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ServiceOptions_IsActive");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_ServiceOptions_SortOrder");

                    b.HasIndex("IsActive", "SortOrder")
                        .HasDatabaseName("IX_ServiceOptions_Active_SortOrder");

                    b.ToTable("ServiceOptions", "servicecatalog");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("HiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Staff_CreatedAt");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Staff_Email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Staff_IsActive");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("IX_Staff_ProviderId");

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("IX_Staff_Name");

                    b.ToTable("Staff", "servicecatalog");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Provider", b =>
                {
                    b.OwnsOne("Booksy.ServiceCatalog.Domain.Entities.BusinessProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("ProviderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BusinessDescription")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("BusinessDescription");

                            b1.Property<string>("BusinessName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("BusinessName");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("LastModifiedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("text");

                            b1.Property<DateTime>("LastUpdatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BusinessProfileLastUpdatedAt");

                            b1.Property<string>("LogoUrl")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("BusinessLogoUrl");

                            b1.Property<string>("SocialMedia")
                                .HasColumnType("jsonb")
                                .HasColumnName("BusinessSocialMedia");

                            b1.Property<string>("Tags")
                                .HasColumnType("jsonb")
                                .HasColumnName("BusinessTags");

                            b1.Property<string>("Website")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("BusinessWebsite");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers", "ServiceCatalog");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");
                        });

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.BusinessAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("ProviderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressCountry");

                            b1.Property<double?>("Latitude")
                                .HasPrecision(10, 8)
                                .HasColumnType("double precision")
                                .HasColumnName("AddressLatitude");

                            b1.Property<double?>("Longitude")
                                .HasPrecision(11, 8)
                                .HasColumnType("double precision")
                                .HasColumnName("AddressLongitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("AddressState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("AddressStreet");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers", "ServiceCatalog");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");
                        });

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("ProviderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Website")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Website");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers", "ServiceCatalog");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");

                            b1.OwnsOne("Booksy.Core.Domain.ValueObjects.Email", "Email", b2 =>
                                {
                                    b2.Property<Guid>("ContactInfoProviderId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(320)
                                        .HasColumnType("character varying(320)")
                                        .HasColumnName("Email");

                                    b2.HasKey("ContactInfoProviderId");

                                    b2.ToTable("Providers", "ServiceCatalog");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInfoProviderId");
                                });

                            b1.OwnsOne("Booksy.Core.Domain.ValueObjects.PhoneNumber", "PrimaryPhone", b2 =>
                                {
                                    b2.Property<Guid>("ContactInfoProviderId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("CountryCode")
                                        .HasMaxLength(5)
                                        .HasColumnType("character varying(5)")
                                        .HasColumnName("PrimaryPhoneCountryCode");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("PrimaryPhoneNumber");

                                    b2.HasKey("ContactInfoProviderId");

                                    b2.ToTable("Providers", "ServiceCatalog");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInfoProviderId");
                                });

                            b1.OwnsOne("Booksy.Core.Domain.ValueObjects.PhoneNumber", "SecondaryPhone", b2 =>
                                {
                                    b2.Property<Guid>("ContactInfoProviderId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("CountryCode")
                                        .HasMaxLength(5)
                                        .HasColumnType("character varying(5)")
                                        .HasColumnName("SecondaryPhoneCountryCode");

                                    b2.Property<string>("Value")
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)")
                                        .HasColumnName("SecondaryPhoneNumber");

                                    b2.HasKey("ContactInfoProviderId");

                                    b2.ToTable("Providers", "ServiceCatalog");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInfoProviderId");
                                });

                            b1.Navigation("Email");

                            b1.Navigation("PrimaryPhone");

                            b1.Navigation("SecondaryPhone");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Service", b =>
                {
                    b.HasOne("Booksy.ServiceCatalog.Domain.Aggregates.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Booksy.ServiceCatalog.Domain.Aggregates.Provider", null)
                        .WithMany("Services")
                        .HasForeignKey("ProviderId1");

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.Price", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("BasePriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("BasePriceCurrency");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services", "servicecatalog");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.OwnsMany("Booksy.ServiceCatalog.Domain.Entities.PriceTier", "PriceTiers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("Id");

                            b1.Property<string>("Attributes")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("jsonb")
                                .HasDefaultValueSql("'{}'::jsonb");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("text");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<bool>("IsActive")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(true);

                            b1.Property<bool>("IsDefault")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false);

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("LastModifiedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SortOrder")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0);

                            b1.HasKey("Id");

                            b1.HasIndex("ServiceId", "IsActive")
                                .HasDatabaseName("IX_ServicePriceTiers_ServiceId_IsActive");

                            b1.ToTable("ServicePriceTiers", "servicecatalog");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");

                            b1.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.Price", "Price", b2 =>
                                {
                                    b2.Property<Guid>("PriceTierId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(18, 2)
                                        .HasColumnType("numeric(18,2)")
                                        .HasColumnName("Price");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("Currency");

                                    b2.HasKey("PriceTierId");

                                    b2.ToTable("ServicePriceTiers", "servicecatalog");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceTierId");
                                });

                            b1.Navigation("Price")
                                .IsRequired();
                        });

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.ServiceCategory", "Category", b1 =>
                        {
                            b1.Property<Guid>("ServiceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("CategoryDescription");

                            b1.Property<string>("IconUrl")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("CategoryIconUrl");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("CategoryName");

                            b1.HasKey("ServiceId");

                            b1.ToTable("Services", "servicecatalog");

                            b1.WithOwner()
                                .HasForeignKey("ServiceId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Category")
                        .IsRequired();

                    b.Navigation("PriceTiers");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.BusinessHours", b =>
                {
                    b.HasOne("Booksy.ServiceCatalog.Domain.Aggregates.Provider", null)
                        .WithMany("BusinessHours")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.OperatingHours", "OperatingHours", b1 =>
                        {
                            b1.Property<Guid>("BusinessHoursId")
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly>("EndTime")
                                .HasColumnType("time without time zone")
                                .HasColumnName("CloseTime");

                            b1.Property<TimeOnly>("StartTime")
                                .HasColumnType("time without time zone")
                                .HasColumnName("OpenTime");

                            b1.HasKey("BusinessHoursId");

                            b1.ToTable("BusinessHours", "ServiceCatalog");

                            b1.WithOwner()
                                .HasForeignKey("BusinessHoursId");
                        });

                    b.Navigation("OperatingHours");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.ServiceOption", b =>
                {
                    b.HasOne("Booksy.ServiceCatalog.Domain.Aggregates.Service", null)
                        .WithMany("Options")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booksy.ServiceCatalog.Domain.ValueObjects.Price", "AdditionalPrice", b1 =>
                        {
                            b1.Property<Guid>("ServiceOptionId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("AdditionalPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("AdditionalPriceCurrency");

                            b1.HasKey("ServiceOptionId");

                            b1.ToTable("ServiceOptions", "servicecatalog");

                            b1.WithOwner()
                                .HasForeignKey("ServiceOptionId");
                        });

                    b.Navigation("AdditionalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Entities.Staff", b =>
                {
                    b.HasOne("Booksy.ServiceCatalog.Domain.Aggregates.Provider", null)
                        .WithMany("Staff")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Provider", b =>
                {
                    b.Navigation("BusinessHours");

                    b.Navigation("Services");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Booksy.ServiceCatalog.Domain.Aggregates.Service", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
