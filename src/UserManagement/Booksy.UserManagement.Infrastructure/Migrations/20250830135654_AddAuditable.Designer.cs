// <auto-generated />
using System;
using Booksy.UserManagement.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Booksy.UserManagement.Infrastructure.Migrations
{
    [DbContext(typeof(UserManagementDbContext))]
    [Migration("20250830135654_AddAuditable")]
    partial class AddAuditable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("user_management")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Booksy.Infrastructure.Core.Persistence.EventStore.StoredEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AggregateId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aggregate_type");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_data");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("event_version");

                    b.HasKey("EventId");

                    b.HasIndex("AggregateType")
                        .HasDatabaseName("ix_event_store_aggregate_type");

                    b.HasIndex("EventType")
                        .HasDatabaseName("ix_event_store_event_type");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_event_store_timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_event_store_user_id");

                    b.HasIndex("AggregateId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_event_store_aggregate_version");

                    b.ToTable("event_store", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("activated_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeactivatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deactivated_at");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("failed_login_attempts");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login_at");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_password_change_at");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("locked_until");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registered_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredAt")
                        .HasDatabaseName("ix_users_registered_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_users_status");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_users_type");

                    b.ToTable("users", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.AuthenticationSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_name");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ended_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_activity_at");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("session_token");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EndedAt")
                        .HasDatabaseName("ix_authentication_sessions_ended_at");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_authentication_sessions_expires_at");

                    b.HasIndex("SessionToken")
                        .IsUnique()
                        .HasDatabaseName("ix_authentication_sessions_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_authentication_sessions_user_id");

                    b.ToTable("authentication_sessions", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.LoginAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("attempted_at");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("failure_reason");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean")
                        .HasColumnName("is_successful");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AttemptedAt")
                        .HasDatabaseName("ix_login_attempts_attempted_at");

                    b.HasIndex("IsSuccessful")
                        .HasDatabaseName("ix_login_attempts_is_successful");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_login_attempts_user_id");

                    b.ToTable("login_attempts", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by_ip");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("replaced_by_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("revoked_reason");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_refresh_tokens_expires_at");

                    b.HasIndex("RevokedAt")
                        .HasDatabaseName("ix_refresh_tokens_revoked_at");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("preferences");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("preferred_language");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("time_zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName")
                        .HasDatabaseName("ix_user_profiles_name");

                    b.ToTable("user_profiles", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assigned_at");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assigned_by");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_user_roles_expires_at");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_user_roles_name");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id_name");

                    b.ToTable("user_roles", "user_management");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Aggregates.User", b =>
                {
                    b.OwnsOne("Booksy.Core.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_users_email");

                            b1.ToTable("users", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Booksy.UserManagement.Domain.ValueObjects.ActivationToken", "ActivationToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("activation_token_created_at");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("activation_token_expires_at");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("activation_token");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Booksy.UserManagement.Domain.ValueObjects.HashedPassword", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("password_hash");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Booksy.UserManagement.Domain.ValueObjects.PasswordResetToken", "PasswordResetToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("password_reset_token_created_at");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("password_reset_token_expires_at");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("password_reset_token");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ActivationToken");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PasswordResetToken");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.AuthenticationSession", b =>
                {
                    b.HasOne("Booksy.UserManagement.Domain.Aggregates.User", null)
                        .WithMany("ActiveSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.LoginAttempt", b =>
                {
                    b.HasOne("Booksy.UserManagement.Domain.Aggregates.User", null)
                        .WithMany("RecentLoginAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Booksy.UserManagement.Domain.Aggregates.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("Booksy.UserManagement.Domain.Aggregates.User", null)
                        .WithOne("Profile")
                        .HasForeignKey("Booksy.UserManagement.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Booksy.Core.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address_street");

                            b1.Property<string>("Unit")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_unit");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("user_profiles", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.OwnsOne("Booksy.Core.Domain.Domain.ValueObjects.PhoneNumber", "AlternatePhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("alternate_phone_country_code");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("alternate_phone_national_number");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("user_profiles", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.OwnsOne("Booksy.Core.Domain.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("phone_country_code");

                            b1.Property<string>("NationalNumber")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("phone_national_number");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("user_profiles", "user_management");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("Address");

                    b.Navigation("AlternatePhoneNumber");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Booksy.UserManagement.Domain.Aggregates.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booksy.UserManagement.Domain.Aggregates.User", b =>
                {
                    b.Navigation("ActiveSessions");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("RecentLoginAttempts");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
